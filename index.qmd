---
title: "Estimación de profundidad de disco de Secchi para el desarrollo de un algoritmo mediante técnicas de teledetección satelital"
format: 
  html:
    number-sections: true
    toc: true
    embed-resources: true
    crossrefs-hover: false
    css: style.css
    code-copy: true
    lang: es
    bibliography: bibliografia/bibliografia.bib
    csl: bibliografia/ieee.csl
    cap-location: bottom
date: last-modified

language: 
  title-block-author-single: "Autor"

author:
  - name: Mauricio Acosta
    orcid: 
    corresponding: true
    email: mauriba491@gmail.com
    affiliations:
      - name: GISTAQ (UTN-FRRe)
        url: https://www.instagram.com/gistaq.utn/

abstract: |
  Este sitio web contiene cuestiones relacionadas a la estimación de la profundidad de disco de Secchi mediante técnicas de sensado remoto. Se presenta información proveniente de investigaciones previas y se discute la confección de modelos de regresión  mediante código de programación así como su evaluación mediante pruebas estadísticas.
keywords:
  - GISTAQ
  - UTN
  - FRRe
  - Quarto
---

# Revisión bibliográfica

Esta revisión tiene como objetivo identificar los enfoques más comunes en la literatura, los tipos de datos utilizados y las variables espectrales que se consideran más relevantes para este tipo de estimaciones.

## Profundidad de disco de Secchi

La profundidad de visibilidad del disco de Secchi $(SDD)$ es una medida ampliamente utilizada para evaluar la transparencia del agua. Se define como la profundidad en metros a la cual un disco blanco circular desaparece al dejarlo descender en un cuerpo de agua.

Esta variable es un indicador indirecto de la calidad del agua, ya que se relaciona con la concentración de sedimentos en suspensión, fitoplancton y otros materiales particulados. Continua siendo utilizado debido a la simplicidad y rango de aplicación universal del método, además de tratarse de un parámetro fácilmente entendible por el público.

## Métodos tradicionales de estimación

En las últimas décadas, se han desarrollado múltiples ecuaciones empíricas y modelos basados en datos in situ y sensores remotos para estimar esta profundidad de manera eficiente y a gran escala. El objetivo de recopilar es identificar patrones comunes, variables predictoras relevantes y estrategias metodológicas empleadas.

| Nombre                 | Variable           | Formula                                 | Muestras | R²   |
|------------------------|--------------------|-----------------------------------------|----------|------|
| Dekker and Peters      | $\mathrm{ln(SDD)}$ | $\mathrm{ln(Red)}$                      | 15       | 0.86 |
| Dominguez Gomez et al. | $\mathrm{SDD}$     | $\mathrm{(Green)^x}$                    | 16       | 0.90 |
| Giardino et al.        | $\mathrm{SDD}$     | $\mathrm{Blue/Green}$                   | 4        | 0.85 |
| Kloiber et al.         | $\mathrm{ln(SDD)}$ | $\mathrm{Blue/Red + Blue}$              | 374      | 0.93 |
| Lathrop and Lillesand  | $\mathrm{ln(SDD)}$ | $\mathrm{Green}$                        | 9        | 0.98 |
| Mancino et al.         | $\mathrm{SDD}$     | $\mathrm{Red/Green + Blue/Green + Blue}$| 60       | 0.82 |


: Tabla 1: Algoritmos publicados para la predicción de $\mathrm{SDD}$ utilizando la plataforma Landstat @Rubin. {.striped .hover .responsive}

En la mayoría de los casos la relación entre $SDD$ y la intensidad de la luz es no lineal, por lo que se utiliza $ln(SDD)$ para realizar la regresión.

La correlación con la banda roja puede explicarse causalmente por la correlación positiva directa entre la reflectancia en el rojo y la carga bruta de partículas que induce la dispersión de partículas. De manera que mientras que la claridad del agua $(SDD)$ desciende, la intensidad en el rojo aumenta @Matthews.

Como referencia se presentan las propiedades de las distintas bandas de la plataforma espacial Sentinel-2:

|  |  | Sentinel-2A | | Sentinel-2B | |
|:--|--:|--:|--:|--:|--:|
| **Banda** | **Resolución espacial (m)** | **Longitud de onda (nm)** | **Ancho de banda (nm)** | **Longitud de onda (nm)** | **Ancho de banda (nm)** |
| $\mathrm{B01}$ (aerosol) | 60 | 442.7 | 20 | 442.3 | 20 |
| $\mathrm{B02}$ (blue) | 10 | 492.7 | 65 | 492.3 | 65 |
| $\mathrm{B03}$ (green) | 10 | 559.8 | 35 | 558.9 | 35 |
| $\mathrm{B04}$ (red) | 10 | 664.6 | 38 | 664.9 | 31 |
| $\mathrm{B05}$ (red edge) | 20 | 794.1 | 14 | 703.8 | 15 |
| $\mathrm{B06}$ | 20 | 748.5 | 14 | 739.1 | 13 |
| $\mathrm{B07}$ | 20 | 782.8 | 19 | 779.7 | 19 |
| $\mathrm{B08}$ (NIR) | 10 | 832.8 | 105 | 832.9 | 104 |
| $\mathrm{B8A}$ | 20 | 864.7 | 21 | 864.0 | 21 |
| $\mathrm{B09}$ | 60 | 945.1 | 19 | 943.2 | 20 |
| $\mathrm{B10}$ | 60 | 1373.5 | 29 | 1376.9 | 29 |
| $\mathrm{B11}$ (SWIR 1) | 20 | 1613.7 | 90 | 1616.4 | 94 |
| $\mathrm{B12}$ (SWIR 2) | 20 | 2292.4 | 174 | 2185.7 | 184 |

: Tabla 2: Propiedades de las bandas S2-MSI, para las plataformas S2A y S2B. {.striped .hover .responsive tbl-colwidths="[20,20,15,15,15,15]"}

## Regresión lineal

En estadística, la regresión lineal es un modelo matemático usado para aproximar la relación de dependencia entre una variable dependiente $Y$ con $m$ variables independientes $X_i$. Este modelo puede ser expresado como:

$$ Y = \beta_0 +  \beta_1 X_1 + \cdots + \beta_m X_m$$

donde:

- $Y$ es la variable dependiente o variable de respuesta.
- $X_1,X_2,...X_m$ son las variables explicativas, independientes o regresoras.
- $\beta_0,\beta_1,\beta_2,...\beta_m$ son los parámetros del modelo, miden la influencia que las variables explicativas tienen sobre el regrediendo.

### Selección de variables

La seleccion de variables y características es el foco de mucha investigación. El objetivo de la selección de variables es mejorar el rendimiento de predicción de los predictores y proporcionar una mejor comprensión del proceso subyacente que generó los datos. 

La identificación de las variables más relevantes para incluir o excluir en un modelo predictivo es un paso fundamental en cualquier investigación rigurosa, especialmente cuando se busca construir modelos con alto poder explicativo y capacidad de generalización. 

Comprender qué variables contribuyen en mayor medida a la calidad de las predicciones permite no solo mejorar el desempeño del modelo, sino también interpretar con mayor claridad los fenómenos que se están estudiando.

No existe una forma segura de definir la importancia de una variable puesto que la utilidad de la misma depende del modelo implementado y de las demás variables con las que interactua: una variable que es completamente inutil por si misma puede resultar en una mejora del rendimiento significativa cuando es considerada junto con otras variables @guyon2003introduction. 

A pesar de las dificultades existen estrategias útiles para determinar un subconjunto de variables útiles para la predicción. Tal es el caso de los métodos *forward selection* y *backwards elimination*. En *forward selection*, las variables son progresivamente incorporadas, evaluando el modelo al paso de cada una, mientras que en *backwards elimination* uno empieza con el conjunto entero de variables y progresivamente elimina las menos prometedoras.

Una forma de implementación de *forward selection* es por empezar por un modelo exento de variables independientes, pero cuyo término independiente sea la media de las variables de respuesta. A partir de este valor se calcula el residuo como la diferencia entre el valor verdadero $Y$ y el valor predecido $Y_{pred}$.

$$r = Y - Y_{pred}$$

Seguidamente, se computa la correlación entre cada variable independiente $X_i$ con el residuo y se incorpora al modelo la variable con la mayor correlación absoluta. El proceso se repite esta vez con las predicciones del nuevo modelo y se continua hasta alcanzar una desempeño deseado o un número determinado de variables. Este método fue utilizado satisfactoriamente en investigaciones previas @BONANSEA2019102265.

![Fig. 1: Matriz de correlación entre las distintas bandas.](img/heatmap.svg){width=80%}

Una herramienta útil para ayudar en la selección de variables es una matriz de correlación. Dos variables prefectamente correlacionadas resultan redundantes en el sentido de que añadir ambas no aporta información adicional. Sin embargo, una correlación muy alta entre variables (o anti-correlación) no significa ausencia de complementariedad.

### Generación de características lineales y no lineales

Incluir nuevas variables a partir de las originales, como productos, cocientes o transformaciones no lineales (por ejemplo, logaritmos, o raíces cuadradas) permite capturar relaciones más complejas entre las variables independientes y la variable objetivo. Por ejemplo, si se dispone de datos espectrales, pueden construirse razones entre bandas (band ratios) o índices espectrales que resalten ciertas propiedades físicas del fenómeno estudiado. Estas nuevas características permiten al modelo lineal aproximar mejor la relación entre los datos y la salida, especialmente cuando la relación real no es perfectamente lineal.

### Métricas de desempeño

Las métricas de desempeño permiten cuantificar qué tan bien un modelo se ajusta a los datos y predice resultados. Algunas métricas evalúan la calidad del ajuste, otras penalizan la complejidad y algunas miden directamente el error de predicción.

El **Coeficiente de Determinación Ajustado $ADJ-R^2$** es una variante de $R^2$ que corrige la tendencia de este último a aumentar al añadir más variables al modelo, incluso si no aportan mejora real. Mientras que el $R^2$ tradicional mide la proporción de variabilidad de la variable dependiente explicada por el modelo, el $ADJ-R^2$ penaliza la inclusión de predictores irrelevantes, ajustando el valor según el número de observaciones y el número de variables independientes. Esto lo hace más útil para comparar modelos con distinto número de predictores, evitando la falsa impresión de mejora solo por complejidad adicional.

El **Criterio de Información de Akaike (AIC)** es una métrica utilizada para comparar modelos estadísticos en términos de ajuste y complejidad. Se basa en la teoría de la entropía y busca identificar el modelo que mejor explica los datos con el menor número posible de parámetros. Un valor de AIC más bajo indica un mejor equilibrio entre ajuste y simplicidad. La fórmula general es:

$$AIC = 2k - 2 ln(L)$$

donde $k$ es el número de parámetros estimados en el modelo y $L$ es el valor máximo de la función de verosimilitud. A diferencia del $ADJ-R^2$ el AIC no tiene un valor máximo fijo y es más útil cuando se comparan múltiples modelos candidatos sobre el mismo conjunto de datos.

El **Error Cuadrático Medio (MSE)** mide el promedio de los cuadrados de las diferencias entre los valores observados y los predichos por el modelo. Es una métrica sensible a errores grandes, ya que los eleva al cuadrado, y por eso penaliza más las predicciones alejadas de la realidad. Su fórmula es:

$$\text{MSE} = \frac{1}{n} \sum_{i=1}^{n} (y_i - \hat{y}_i)^2$$

donde $y_i$ y son $\hat{y}_i$ los valores reales y los valores predichos. Un MSE más bajo indica un mejor desempeño del modelo, pero su escala depende de la magnitud de la variable objetivo, por lo que no siempre es directamente interpretable sin contexto.

## Índices espectrales
Los índices espectrales son combinaciones matemáticas de reflectancias en distintas bandas del espectro electromagnético obtenidas por sensores remotos, como satélites o drones. Estos índices realzan ciertas características o propiedades de la superficie observada, facilitando la identificación y monitoreo de elementos como vegetación, agua, suelo o áreas urbanas. Al reducir la información a una sola variable combinada, permiten detectar cambios y evaluar condiciones ambientales con mayor precisión que el análisis de bandas individuales.

### NDWI
El Índice de Diferencia Normalizada del Agua (NDWI) es un índice espectral diseñado para resaltar la presencia y extensión de cuerpos de agua en imágenes satelitales. Se calcula utilizando reflectancias en bandas específicas del verde y el infrarrojo cercano, y su fórmula clásica es:

$$NDWI = \frac{R_{\text{verde}} - R_{\text{NIR}}}{R_{\text{verde}} + R_{\text{NIR}}}$$

donde $R_{verde} es la reflectancia en la banda verde y $R_{NIR}$ la reflectancia en la banda del infrarrojo cercano. Valores altos de NDWI indican presencia probable de agua, ya que el agua absorbe fuertemente en el NIR y refleja más en el verde.

# Regresión Lineal

La construcción del modelo se lleva a cabo utilizando la versión de Python 3.12 y las librerías previamente especificadas, detallando la función de cada pieza de código, observaciones, avances y descubrimientos.

## Librerías

Para regresión lineal se usan principalmente las librerías de Python *numpy*, *pandas* y *Scikit-learn*.

- **Scikit-learn**: está en el corazón de las operaciones de ciencias de datos en Python. Ofrece módulos para procesamiento de datos, aprendizaje supervisado y no supervisado, selección y validación de modelos, y métricas de error.
- **Pandas**: especializada en la manipulación y el análisis de datos. Ofrece estructuras de datos y operaciones para manipular tablas numéricas y series temporales.
- **NumPy**: provee al usuario con arreglos multidimensionales, junto a un gran conjunto de funciones para operar en estos.

## Lectura de datos

Para la carga, lectura y manipulación de la información la librería *Pandas* permite convertir un archivo .csv en un *DataFrame*, estructura de datos que facilita la manipulación de estos. El fragmento de código siguiente agrupa los valores de $SDD$ con los valores de reflectancia a diferentes longitudes de onda para los cuales coinciden fecha, latitud y longitud y crea un nuevo *DataFrame*.

```{python}
import pandas as pd

# Rutas a los archivos CSV
archivo_reflectancias = "datos\\base_de_datos_gis.csv"  # contiene: fecha,punto,pixel,banda,reflect,longitud,latitud
archivo_parametros = "datos\\base_de_datos_lab.csv"     # contiene: fecha,longitud,latitud,param,valor

# Leer los archivos
df_reflect = pd.read_csv(archivo_reflectancias)
df_param = pd.read_csv(archivo_parametros)

# Filtrar los parámetros "secchi"
df_secchi = df_param[df_param["param"].str.lower() == "secchi"]
df_reflect = df_reflect[(df_reflect["pixel"] == "3x3")]

# Merge por fecha y coordenadas
merged = pd.merge(
    df_secchi,
    df_reflect,
    on=["fecha", "latitud", "longitud"],
    how="inner"
)

# Pivotear la tabla para poner bandas como columnas
tabla_final = merged.pivot_table(
    index=["param", "fecha", "longitud", "latitud", "valor"], 
    columns="banda",
    values="reflect"
).reset_index()

# Reordenar columnas: param | B01 | B02 | ... | B8A
bandas = ['B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B11', 'B12', 'B8A']
columnas_finales = ['valor'] + bandas

# Crear Tabla final
df = tabla_final[columnas_finales]
```

El *DataFrame* obtenido se asemeja a la siguiente tabla:

| $\mathrm{SDD}$  | $\mathrm{B01}$  | $\mathrm{B02}$  | $\cdots$  | $\mathrm{B12}$  | $\mathrm{B8A}$  |
| :--------------:| :--------------:| :--------------:| :--------:| :--------------:| :--------------:|
| 10              | 0,1728          | 0,1754          | $\cdots$  | 0,1404          | 0,1869          |
| 15              | 0,1497          | 0,17022         | $\cdots$  | 0,1113          | 0,1567          |
| $\vdots$        | $\vdots$        | $\vdots$        | $\cdots$  | $\vdots$        | $\vdots$        |
| 125             | 0,1571          | 0,1563          | $\cdots$  | 0,1419          | 0,1436          |scr
| 135             | 0,1503          | 0,1591          | $\cdots$  | 0,1420          | 0,1454          |

: Tabla 3: DataFrame de los datos recolectados. {.striped .hover .responsive}

## Análisis de los datos

La relación no lineal entre la penetración de la luz y la profundidad de disco de Secchi fue ya descrita por diversos autores que hallan una mejor descripción de esta como una de tipo logaritmica @modisComparison. Se verifica este comportamiento con las bandas B04, B05 y B06:

```{python}
#| echo: false
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
fig, ax = plt.subplots(ncols=2,nrows = 3, figsize=(8,7))

SDD = df.iloc[24:31,0]
log_SDD = np.log(SDD)
B04 = df.iloc[24:31,4]
B05 = df.iloc[24:31,5]
B06 = df.iloc[24:31,6]

# B04 SDD
ax[0,0].scatter(B04, SDD, color="#17A77E", alpha=0.7)
ax[0,0].plot([min(B04),max(B04)],[max(SDD),min(SDD)], color='gray', linestyle='--')
ax[0,0].set(ylabel="SDD")

# B04 LOG(SDD)
lm = LinearRegression().fit(B04.values.reshape(-1,1), log_SDD)
ax[0,1].scatter(B04, log_SDD, color="#9D50A6", alpha=0.7)
ax[0,1].plot([min(B04),max(B04)],[lm.predict([[min(B04)]]),lm.predict([[max(B04)]])], color='gray', linestyle='--')
ax[0,1].set(ylabel="ln(SDD)")
ax[0,1].text(0.01,0.02,f'ln(SDD) = {round(lm.coef_[0],2)} • B04 + {round(lm.intercept_,2)}', transform=ax[0,1].transAxes)
ax[0,1].text(0.01,0.09,f'R² = {round(r2_score(log_SDD,lm.predict(B04.values.reshape(-1,1))),2)}', transform=ax[0,1].transAxes)

# B05
ax[1,0].scatter(B05, SDD, color="#17A77E", alpha=0.7)
ax[1,0].plot([min(B05),max(B05)],[max(SDD),min(SDD)], color='gray', linestyle='--')
ax[1,0].set(ylabel="SDD")

# B05 LOG(SDD)
lm = LinearRegression().fit(B05.values.reshape(-1,1), log_SDD)
ax[1,1].scatter(B05, log_SDD, color="#9D50A6", alpha=0.7)
ax[1,1].plot([min(B05),max(B05)],[lm.predict([[min(B05)]]),lm.predict([[max(B05)]])], color='gray', linestyle='--')
ax[1,1].set(ylabel="ln(SDD)")
ax[1,1].text(0.01,0.02,f'ln(SDD) = {round(lm.coef_[0],2)} • B05 + {round(lm.intercept_,2)}', transform=ax[1,1].transAxes)
ax[1,1].text(0.01,0.09,f'R² = {round(r2_score(log_SDD,lm.predict(B05.values.reshape(-1,1))),2)}', transform=ax[1,1].transAxes)

# B06
ax[2,0].scatter(B06, SDD, color="#17A77E", alpha=0.7)
ax[2,0].plot([min(B06),max(B06)],[max(SDD),min(SDD)], color='gray', linestyle='--')
ax[2,0].set(ylabel="SDD")

# B06 LOG(SDD)
lm = LinearRegression().fit(B06.values.reshape(-1,1), log_SDD)
ax[2,1].scatter(B06, log_SDD, color="#9D50A6", alpha=0.7)
ax[2,1].plot([min(B06),max(B06)],[lm.predict([[min(B06)]]),lm.predict([[max(B06)]])], color='gray', linestyle='--')
ax[2,1].set(ylabel="ln(SDD)")
ax[2,1].text(0.01,0.02,f'ln(SDD) = {round(lm.coef_[0],2)} • B06 + {round(lm.intercept_,2)}', transform=ax[2,1].transAxes)
ax[2,1].text(0.01,0.09,f'R² = {round(r2_score(log_SDD,lm.predict(B06.values.reshape(-1,1))),2)}', transform=ax[2,1].transAxes)

plt.tight_layout()
plt.subplots_adjust(wspace=0.2)
plt.show()

```

## Desarrollo del modelo

```{python}
#| echo: false
import sys
sys.path.append("scripts")  # only if your .py is not in the same folder
from regresion import *
from IPython.display import display, HTML

def toHTML(df):
  display(HTML(df.to_html(index=False)))

X = df.drop(columns='valor')
y = df['valor']
```

Para el desarrollo del modelo se implementó la clase ```RegresionLineal```, que contiene el código necesario para la construcción y selección de variables así como para la validación cruzada del modelo. La misma requiere unicamente de los arrays correspondientes a la variable objetivo y a las características con las que estimarla. El script se encuentra disponible [acá](https://github.com/mauri491/sitio_secchi/blob/main/scripts/regresion.py).

Se realiza la búsqueda de ecuaciones utilizando los valores de reflectancia corregidos por SEN2COR y por ACOLITE de manera separada.

### Corrección por SEN2COR

La implementación del método sepwise forward selection permite evaluar la adición de variables al modelo predictivo en una instancia inicial donde no se general características adicionales. Los resultados de cada paso se encuentran resumidos en la siguiente tabla:
```{python}
#| echo: false
Modelo = RegresionLineal(X,y)
display(HTML(Modelo.stepwise().to_html(index=False)))
```

La banda B05 es la banda que por si sola resulta en la mayor mejoría para el valor de $R^2$, seguida por B02 y B08, a partir de la cual el valor de $ADJ-R^2$ comienza a disminuir, indicando una posible situación de sobreajuste. De este modo, el mejor modelo que puede obtenerse sin generar características adicionales consta de tres variables.

Haciendo uso de la relación logaritmica entre la profundidad de disco y la penetración de la luz descrita y probada previamente se obtiene un modelo con una notable mejoría:

```{python}
#| echo: false
toHTML(Modelo.stepwise(log_y = True))
```

La mejoría se extiende hasta la adición de la variable B02, después de la cual hay una ligera disminución de $R^2-ajustado$, pero no lo suficientemente significativa como para tratarse de un caso de sobreajuste considerable.

La aplicación del logaritmo puede extenderse a las variables mismas, resultando en un modelo predictivo mucho más certero con una menor cantidad de variables:

```{python}
#| echo: false
toHTML(Modelo.stepwise(log_y = True, log_X = True))
```

La combinación de log(B05) y B02 resulta prometedora. La adición de más variables parecería tender a explicar ruido. Los coeficientes y ordenada de la ecuación resultante son:

```{python}
#| echo: false
#| output: false
Modelo.stepwise(max_vars = 2, log_y = True, log_X = True)
```

```{python}
#| echo: false
toHTML(Modelo.stepwise(max_vars = 2, log_y = True, log_X = True))
```

Los coeficientes y ordenada resultantes de considerar a las primeras dos variables son:

```{python}
#| echo: false
toHTML(Modelo.coeficientes())
```


El uso de cocientes entre las variables otorga una cantidad mucho más extensiva de predictores, observamos que de considerar a estos junto con las variables linealizadas, estos predominan como mejores contribuyentes a la mejora de la predicción:

```{python}
#| echo: false
toHTML(Modelo.stepwise(log_y = True, log_X = True, cocientes = True))
```

Los coeficientes y ordenada resultantes de considerar a las primeras dos variables son:

```{python}
#| echo: false
#| output: false
toHTML(Modelo.stepwise(max_vars = 2, log_y = True, log_X = True, cocientes = True))
```

```{python}
#| echo: false
toHTML(Modelo.coeficientes())
```

### Corrección por ACOLITE

Se repite el proceso que con los datos corregidos por el algoritmo SEN2COR. Se menciona que en la lectura y tratamiento de datos se descartaron los puntos para los cuales los valores de reflectancia eran negativos luego de la corrección.

```{python}
#| echo: false
#| output: false
import pandas as pd

# Rutas a los archivos CSV
archivo_reflectancias = "datos\\base_de_datos_gis_acolite.csv"  # contiene: fecha,punto,pixel,banda,reflect,longitud,latitud
archivo_parametros = "datos\\base_de_datos_lab.csv"     # contiene: fecha,longitud,latitud,param,valor

# Leer los archivos
df_reflect = pd.read_csv(archivo_reflectancias)
df_param = pd.read_csv(archivo_parametros)

# Filtrar los parámetros "secchi"
df_secchi = df_param[df_param["param"].str.lower() == "secchi"]

# Merge por fecha y coordenadas
merged = pd.merge(
    df_secchi,
    df_reflect,
    on=["fecha", "latitud", "longitud"],
    how="inner"
)

# Pivotear la tabla para poner bandas como columnas
tabla_final = merged.pivot_table(
    index=["param", "fecha", "longitud", "latitud", "valor"], 
    columns="banda",
    values="reflect"
).reset_index()

# Reordenar columnas: param | B01 | B02 | ... | B8A
bandas = ['B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B11', 'B12', 'B8A']
columnas_finales = ['valor'] + bandas

# Crear Tabla final
df = tabla_final[columnas_finales]
df = df[(df[bandas] > 0).all(axis=1)] # Remuevo valores donde la reflectancia es negativa
print(df[bandas].min())
print(df[bandas].max())


X = df.drop(columns='valor')
y = df['valor']

Modelo_ACOLITE = RegresionLineal(X,y)
```


Partimos de haber hallado que la aplicación del logaritmo a la profundidad de disco resulta en un mejor ajuste. En relación a los valores corregidos por ACOLITE esto devuelve los siguientes resultados:

```{python}
#| echo: false
toHTML(Modelo_ACOLITE.stepwise(log_y = True))
```

Observamos nuevamente un máximo y un mínimo de $R^2$ y $AIC$ respectivamente. Los valores de $R^2$ y $R^2-ADJ$ aumentaron significativamente respecto a aquellos con la corrección por SEN2COR.

Para una relación doblemente logarítimica, obtenemos lo siguiente:

```{python}
#| echo: false
toHTML(Modelo_ACOLITE.stepwise(log_y = True, log_X = True))
```

```{python}
#| echo: false
#| output: false
Modelo_ACOLITE.stepwise(max_vars = 2, log_y = True, log_X = True)
```

```{python}
#| echo: false
Modelo_ACOLITE.coeficientes()
```

Donde esta vez se ve una desmejora respecto al modelo corregido por SEN2COR para un modelo de dos variables logarítimicas.

La incorporación de cocientes al abanico de variables devuelve las siguientes métricas:

```{python}
#| echo: false
toHTML(Modelo_ACOLITE.stepwise(log_y = True, log_X = True, cocientes = True))
```

```{python}
#| echo: false
#| output: false
Modelo_ACOLITE.stepwise(max_vars = 2, log_y = True, log_X = True, cocientes = True)
```

```{python}
#| echo: false
Modelo_ACOLITE.coeficientes()
```

Nuevamente, se ve una desmejora respecto al modelo corregido por SEN2COR. El número de variables se reduce a una.

## Ecuaciones halladas

El par de mejores ecuaciones halladas para cada algoritmo de corrección utilizando la transformación logarítmica fueron las siguientes:
$$ log(SDD)_{SEN2COR} = -12.89 \cdot log(B05) + 29.11 \cdot B02 - 10.14 $$

$$ log(SDD)_{ACOLITE} = -4.89 \cdot log(B05) + 4.53 \cdot log(B02) + 3.89 $$

Sus ajustes se visualizan de la siguiente manera:
```{python}
#| echo: false
#| classes: styled-output
Modelo.stepwise(max_vars = 2, log_y = True, log_X = True)
Modelo_ACOLITE.stepwise(max_vars = 2, log_y = True, log_X = True)

fig, axs = plt.subplots(1, 2, figsize=(9, 4))
Modelo.graficar(ax = axs[0], title = 'SEN2COR')
Modelo_ACOLITE.graficar(ax = axs[1], title = 'ACOLITE')
```
El par de mejores ecuaciones halladas para cada algoritmo utilizando cocientes entre las variables es:

$$ log(SDD)_{SEN2COR} = -3.97\frac{B05}{B02} + 1.43\frac{B11}{B01}+ 7.41 $$

$$ log(SDD)_{ACOLITE} = -2.42\frac{B05}{B03} + 2.09\frac{B08}{B06}+ 4.15 $$

Sus ajustes se visualizan de la siguiente manera:
```{python}
#| echo: false
#| classes: styled-output
Modelo.stepwise(max_vars = 2, log_y = True, cocientes = True)
Modelo_ACOLITE.stepwise(max_vars = 2, log_y = True, cocientes = True)

fig, axs = plt.subplots(1, 2, figsize=(9, 4))
Modelo.graficar(ax = axs[0], title = 'SEN2COR')
Modelo_ACOLITE.graficar(ax = axs[1], title = 'ACOLITE')
```

Observamos que la utilización del algoritmo de ACOLITE para la corrección atmosférica ocasiona una desmejora en la estimación.

## Mapas de la estimación

Los mapas generados para cada fecha corresponden al recorte del área de interés del producto satelital corregido por ACOLITE.

```{python}
#| echo: false
import sys
sys.path.append("scripts") 
from mapas import *
```

::: {.panel-tabset}
## 06/09/25
```{python}
#| echo: false
#| classes: styled-output
generar_mapa("2025-06-09")
```

## 16/12/24
```{python}
#| echo: false
#| classes: styled-output
generar_mapa("2024-12-16")
```

## 30/05/24
```{python}
#| echo: false
#| classes: styled-output
generar_mapa("2024-05-30")
```

## 20/05/24
```{python}
#| echo: false
#| classes: styled-output
generar_mapa("2024-05-20")
```

## 12/12/23
```{python}
#| echo: false
#| classes: styled-output
generar_mapa("2023-12-12")
```

## 11/05/23
```{python}
#| echo: false
#| classes: styled-output
generar_mapa("2023-05-11")
```
:::

# Random Forest
```{python}
#| echo: false

import sys
sys.path.append("scripts") 
from machine_learning import *

import pandas as pd

# Rutas a los archivos CSV
archivo_reflectancias = "datos\\base_de_datos_gis.csv"  # contiene: fecha,punto,pixel,banda,reflect,longitud,latitud
archivo_parametros = "datos\\base_de_datos_lab.csv"     # contiene: fecha,longitud,latitud,param,valor

# Leer los archivos
df_reflect = pd.read_csv(archivo_reflectancias)
df_param = pd.read_csv(archivo_parametros)

# Filtrar los parámetros "secchi"
df_secchi = df_param[df_param["param"].str.lower() == "secchi"]
df_reflect = df_reflect[(df_reflect["pixel"] == "3x3")]

# Merge por fecha y coordenadas
merged = pd.merge(
    df_secchi,
    df_reflect,
    on=["fecha", "latitud", "longitud"],
    how="inner"
)

# Pivotear la tabla para poner bandas como columnas
tabla_final = merged.pivot_table(
    index=["param", "fecha", "longitud", "latitud", "valor"], 
    columns="banda",
    values="reflect"
).reset_index()

# Reordenar columnas: param | B01 | B02 | ... | B8A
bandas = ['B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B11', 'B12', 'B8A']
columnas_finales = ['valor'] + bandas

# Crear Tabla final
df = tabla_final[columnas_finales]
X = df.drop(columns='valor')
y = df['valor']

reg = RegresionML(X, y)

# entrenar
reg.train_xgb()
reg.graficar(model = 'xgb')
```

